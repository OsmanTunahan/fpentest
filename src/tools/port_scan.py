import socket, threading
from traceback import print_exc
from abc import ABC, abstractmethod
from ..models.Tool import Tool

class PortScanner(ABC):
    @abstractmethod
    def check_port(self, domain, port, timeout):
        pass
    
class TCPPortScanner(PortScanner):
    def check_port(self, domain, port, timeout):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.settimeout(timeout)
        try:
            sock.connect((domain, port))
            try:
                service_name = socket.getservbyport(port, 'tcp')
            except OSError:
                service_name = 'Unknown service'

            try:
                sock.sendall(b'\n')
                banner = sock.recv(1024).decode().strip()
            except:
                banner = 'No banner'

            return (port, service_name, banner)
        except socket.timeout:
            return None
        except ConnectionRefusedError:
            return None
        except:
            print_exc()
            return None
        finally:
            sock.close()

class PortScan(Tool):
    def __init__(self):
        super().__init__(name="Port Scan", description="Scan open ports on a target machine")
        self.domain = None
        self.timeout = 2.0
        self._ports_active = []
        self._known_ports = set()
        self.port_scanner = TCPPortScanner()
        
    def _scan_port(self, port):
        result = self.port_scanner.check_port(self.domain, port, self.timeout)
        if result:
            port, service_name, banner = result
            with self._lock:
                if port not in self._known_ports:
                    self._ports_active.append(result)
                    self._known_ports.add(port)
                    print(f"\033[38;5;46m[*] Found active port \033[38;5;91m{port}\033[0m (\033[38;5;51m{service_name}\033[38;5;255m - \033[38;5;4m{banner}\033[0m)")

        
    def run(self):
        print("Welcome to port scanner!")
        

if __name__ == '__main__':
    tool = PortScan()
    tool.run()