#!/usr/bin/python3
import requests
from lxml import html
from urllib.parse import urlparse
from abc import ABC, abstractmethod

class Colors:
    VERDE = "\033[92m"
    ROJO = "\033[91m"
    AMARILLO = "\033[93m"
    RESET = "\033[0m"

class BannerPrinter:
    @staticmethod
    def banner():
        """Prints a welcome banner."""
        banner = r"""
        ███████╗    ██████╗ ███████╗███╗   ██╗████████╗███████╗███████╗████████╗
        ██╔════╝    ██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝
        █████╗█████╗██████╔╝█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ██║   
        ██╔══╝╚════╝██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██║   
        ██║         ██║     ███████╗██║ ╚████║   ██║   ███████╗███████║   ██║   
        ╚═╝         ╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝   ╚═╝   
        """
        print(Colors.VERDE + banner + Colors.RESET)

class UrlValidator:
    @staticmethod
    def validar_url(url):
        """Validates the given URL."""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except ValueError:
            return False

class VulnerabilityChecker(ABC):
    """Abstract base class for all vulnerability checkers."""
    @abstractmethod
    def check(self, url):
        pass

class CSRFChecker(VulnerabilityChecker):
    """CSRF vulnerability checker."""
    def check(self, url):
        response = requests.get(url, timeout=10)
        root = html.fromstring(response.content)
        formularios = root.xpath('//form')
        for formulario in formularios:
            csrf_token = formulario.xpath('//input[@name="csrf_token"]')
            if not csrf_token:
                print(Colors.AMARILLO + "⚠️ Possible CSRF vulnerability in the form." + Colors.RESET)
            else:
                print(Colors.VERDE + "✅ CSRF token found." + Colors.RESET)

class SQLInjectionChecker(VulnerabilityChecker):
    """SQL Injection vulnerability checker."""
    PAYLOADS = ["' OR 1=1--", "' OR 'a'='a", "' OR 1=1#", "' AND 1=1--", "'+OR+1=1--", "' OR 'x'='x"]

    def check(self, url):
        vulnerable = False
        for payload in self.PAYLOADS:
            try:
                response = requests.get(f"{url}{payload}", timeout=10)
                if "SQL" in response.text or "syntax" in response.text:
                    print(Colors.AMARILLO + f"⚠️ Possible SQL Injection vulnerability with payload: {payload}" + Colors.RESET)
                    vulnerable = True
            except requests.RequestException as e:
                print(Colors.ROJO + f"❌ Error checking for SQL Injection: {e}" + Colors.RESET)
        if not vulnerable:
            print(Colors.VERDE + "✅ No SQL Injection vulnerabilities detected." + Colors.RESET)


class XSSChecker(VulnerabilityChecker):
    """XSS vulnerability checker with multiple payloads and dynamic parameter selection."""

    PAYLOADS = [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert(1)>",
        "<svg onload=alert(1)>",
        "'\"><script>alert(1)</script>",
        "'><img src=x onerror=alert(1)>",
        "<iframe src='javascript:alert(1)'></iframe>"
    ]

    def _extract_form_inputs(self, root):
        """Extracts all input names from forms on the page."""
        inputs = root.xpath("//input[@name]")
        params = [input_elem.get('name') for input_elem in inputs]
        return params

    def _test_payloads_on_parameters(self, url, params):
        """Tests multiple payloads on the extracted parameters."""
        vulnerable = False
        for payload in self.PAYLOADS:
            for param in params:
                try:
                    response = requests.get(url, params={param: payload}, timeout=10)
                    if payload in response.text:
                        print(Colors.AMARILLO + f"⚠️ Possible XSS vulnerability with payload: {payload} on parameter: {param}" + Colors.RESET)
                        vulnerable = True
                except requests.RequestException as e:
                    print(Colors.ROJO + f"❌ Error checking for XSS with payload: {payload} on parameter: {param} - {e}" + Colors.RESET)

        if not vulnerable:
            print(Colors.VERDE + "✅ No XSS vulnerabilities detected." + Colors.RESET)

    def check(self, url):
        """Check for XSS by dynamically testing form inputs."""
        try:
            response = requests.get(url, timeout=10)
            root = html.fromstring(response.content)
            
            params = self._extract_form_inputs(root)
            if not params:
                print(Colors.AMARILLO + "⚠️ No input fields found on the page. Testing 'q' parameter as fallback." + Colors.RESET)
                params = ['q']

            self._test_payloads_on_parameters(url, params)

        except requests.RequestException as e:
            print(Colors.ROJO + f"❌ Error checking for XSS: {e}" + Colors.RESET)


class VulnerabilityScanner:
    """Main class for scanning vulnerabilities."""
    def __init__(self):
        self.checkers = []

    def add_checker(self, checker):
        """Adds a vulnerability checker to the list."""
        self.checkers.append(checker)

    def scan(self, url):
        """Scans the URL for the selected vulnerabilities."""
        if not UrlValidator.validar_url(url):
            print(Colors.ROJO + "❌ Invalid URL. Please enter a valid URL." + Colors.RESET)
            return

        for checker in self.checkers:
            checker.check(url)

class OptionSelector:
    @staticmethod
    def select_options():
        """Selects vulnerability scanning options."""
        print("Select vulnerabilities to check:")
        print("1. CSRF")
        print("2. SQL Injection")
        print("3. XSS")
        print("4. All")
        
        selection = input("Enter the option number: ")
        options = []

        if selection == '1':
            options.append(CSRFChecker())
        elif selection == '2':
            options.append(SQLInjectionChecker())
        elif selection == '3':
            options.append(XSSChecker())
        elif selection == '4':
            options = [CSRFChecker(), SQLInjectionChecker(), XSSChecker()]
        else:
            print(Colors.ROJO + "❌ Invalid option." + Colors.RESET)
            return None

        return options

if __name__ == "__main__":
    BannerPrinter.banner()

    url_to_scan = input("Enter the URL to scan: ")
    selected_options = OptionSelector.select_options()

    if selected_options:
        scanner = VulnerabilityScanner()
        for option in selected_options:
            scanner.add_checker(option)
        scanner.scan(url_to_scan)